forall x. (forall y. (child(y, x) -> fly(y)) ^ dragon(x) -> happy(x))           [premise]
forall x. (green(x) ^ dragon(x) -> fly(x))                                      [premise]
forall x. (exists y. (parent(y, x) ^ green(y)) -> green(x))                     [premise]
forall z. forall x. (child (x, z) ^ dragon(z) -> dragon(x))                     [premise]
forall x. forall y. (child (y, x) -> parent(x, y))                              [premise]
  c                                                                             [forall I const]
    dragon(c)                                                                   [ass]
      green(c)                                                                  [ass]
        d                                                                       [forall I const]
          child(d, c)                                                           [ass]
          parent(c, d)                                                          [forall->E(10,5)]
          parent(c, d) ^ green(c)                                               [^I(8,11)]
          exists y. (parent(y, d) -> green(y))                                  [existsI(12)]
          green(d)                                                              [forall->E(13,3)]
          child(d,c) ^ dragon(c)                                                [^I(7,10)]
          dragon(d)                                                             [forall->E(15,4)]
          green(d) ^ dragon(d)                                                  [^I(14,16)]
          fly(d)                                                                [forall->E(17,2)]
        child(d, c) -> fly(d)                                                   [->I(10,18)]
      forall y. (child(y, c) -> fly(y))                                         [forallI(9,19)]
      forall y. (child(y, c) -> fly(y)) ^ dragon(c)                             [^I(7,20)]
      happy(c)                                                                  [forall->E(21,1)]
    green(c) -> happy(c)                                                        [->I(8,22)]
  dragon(c) -> (green(c) -> happy(c))                                           [->I(7,23)]
forall x. (dragon(x) -> (green(x) -> happy(x)))                                 [forallI(6,24)]
